{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to geoso \u00b6 A Python package for collecting and spatio-temporal analysis of social media contents GitHub repo: https://github.com/MahdiFarnaghi/geoso PyPI: https://pypi.org/project/geoso/ Documentation: https://MahdiFarnaghi.github.io/geoso Free software: MIT license Introduction \u00b6 geoso is a Python library, being developed to facilitate collection, cleansing, and spatial and spatio-temporal analysis of social media data. The vision is that the library provided the possibility to download geo-tagged social media content into a database, e.g., PostgreSQL, preprocess the stored data, retrieve, and analyse the data. Features \u00b6 Twitter Download tweets from Twitter Streaming API and save them into either a database or JSON Lines text files. Import tweets that were from JSON Lines text files into the database. Export tweets to CSV file. Retrieve tweets from the database as pandas DataFrame . Under development features \u00b6 Twitter Clean tweets text in the database. Detect tweets that were published by bots. Scientific publications \u00b6 If you are using this library, the following scientific publications could be of your interest. Farnaghi, M., Ghaemi, Z., & Mansourian, A. (2020). Dynamic Spatio-Temporal Tweet Mining for Event Detection: A Case Study of Hurricane Florence . International Journal of Disaster Risk Science, 11, 378-393. Ostermann, F. O. (2021). Linking geosocial sensing with the socio-demographic fabric of smart cities. ISPRS international journal of geo-information , 10(2), 1-22. [52]. Zahra, K., Imran, M., Ostermann, F. O. (2020). Automatic identification of eyewitness messages on twitter during disasters . Information processing & management 57 (1), 102107 Ghaemi, Z. & Farnaghi, M. 2019. A Varied Density-based Clustering Approach for Event Detection from Heterogeneous Twitter Data. ISPRS International Journal of Geo-Information, 8 (2). Credits \u00b6 spaCy is used for cleaning texts. Tweepy is used to develop Twitter data retrieval functionalities. This package was created with Cookiecutter and the giswqs/pypackage project template and instructions from Python Packages book.","title":"Home"},{"location":"#welcome-to-geoso","text":"A Python package for collecting and spatio-temporal analysis of social media contents GitHub repo: https://github.com/MahdiFarnaghi/geoso PyPI: https://pypi.org/project/geoso/ Documentation: https://MahdiFarnaghi.github.io/geoso Free software: MIT license","title":"Welcome to geoso"},{"location":"#introduction","text":"geoso is a Python library, being developed to facilitate collection, cleansing, and spatial and spatio-temporal analysis of social media data. The vision is that the library provided the possibility to download geo-tagged social media content into a database, e.g., PostgreSQL, preprocess the stored data, retrieve, and analyse the data.","title":"Introduction"},{"location":"#features","text":"Twitter Download tweets from Twitter Streaming API and save them into either a database or JSON Lines text files. Import tweets that were from JSON Lines text files into the database. Export tweets to CSV file. Retrieve tweets from the database as pandas DataFrame .","title":"Features"},{"location":"#under-development-features","text":"Twitter Clean tweets text in the database. Detect tweets that were published by bots.","title":"Under development features"},{"location":"#scientific-publications","text":"If you are using this library, the following scientific publications could be of your interest. Farnaghi, M., Ghaemi, Z., & Mansourian, A. (2020). Dynamic Spatio-Temporal Tweet Mining for Event Detection: A Case Study of Hurricane Florence . International Journal of Disaster Risk Science, 11, 378-393. Ostermann, F. O. (2021). Linking geosocial sensing with the socio-demographic fabric of smart cities. ISPRS international journal of geo-information , 10(2), 1-22. [52]. Zahra, K., Imran, M., Ostermann, F. O. (2020). Automatic identification of eyewitness messages on twitter during disasters . Information processing & management 57 (1), 102107 Ghaemi, Z. & Farnaghi, M. 2019. A Varied Density-based Clustering Approach for Event Detection from Heterogeneous Twitter Data. ISPRS International Journal of Geo-Information, 8 (2).","title":"Scientific publications"},{"location":"#credits","text":"spaCy is used for cleaning texts. Tweepy is used to develop Twitter data retrieval functionalities. This package was created with Cookiecutter and the giswqs/pypackage project template and instructions from Python Packages book.","title":"Credits"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/MahdiFarnaghi/geoso/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it. Write Documentation \u00b6 geoso could always use more documentation, whether as part of the official geoso docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/MahdiFarnaghi/geoso/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up geoso for local development. Fork the geoso repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/geoso.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv geoso $ cd geoso/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 geoso tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/MahdiFarnaghi/geoso/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/MahdiFarnaghi/geoso/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"geoso could always use more documentation, whether as part of the official geoso docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/MahdiFarnaghi/geoso/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up geoso for local development. Fork the geoso repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/geoso.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv geoso $ cd geoso/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 geoso tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/MahdiFarnaghi/geoso/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"geoso/","text":"geoso module \u00b6 Main module.","title":"geoso module"},{"location":"geoso/#geoso-module","text":"Main module.","title":"geoso module"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install geoso, run this command in your terminal: 1 pip install geoso This is the preferred method to install geoso, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources \u00b6 The sources for geoso can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/MahdiFarnaghi/geoso","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install geoso, run this command in your terminal: 1 pip install geoso This is the preferred method to install geoso, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for geoso can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/MahdiFarnaghi/geoso","title":"From sources"},{"location":"usage/","text":"Usage \u00b6 geoso can be used in two different ways. Through the command line interface (CLI) In a python script Using geoso in a python script \u00b6 To use geoso in a project: 1 import geoso Using geoso CLI \u00b6 After installing geoso , e.g., in a python environment, you can simply execute geoso in command line to get access to provided functionality. 1 (base) mf@ut: geoso To see the possible commands under geoso CLI, use the following command: 1 (base) mf@ut: geoso --help Retrieve tweets from the Streaming API \u00b6 To retrieve tweets for a particular bounding box from Twitter Streaming API and save it in a PostgreSQL database (with PostGIS extension) or in a folder as JSON Lines files , use the following command: 1 geoso --verbose twitter-retrieve-data-streaming-api You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option, as follows: 1 geoso --verbose twitter-retrieve-data-streaming-api --help Retrieve information about the tweets that were saved in the database \u00b6 To retrieve information about the tweets that have been already saved in the database, use the following command. 1 geoso --verbose twitter-get-tweets-info-from-db You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option. Export tweets from the database to a CSV file \u00b6 To export tweets from the database to a CSV (comma separated values) file , use the following command: 1 geoso --verbose twitter-export-db-to-csv You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option. Import tweets from JSON Lines files to the database \u00b6 Whenever you have some tweets saved in a JSON Lines file , you can use the following command to import those tweets into your PostgreSQL database: 1 geoso --verbose twitter-import-jsonl-file-to-db If you have more than one JSON Lines file , saved in a folder on your machine, the following command can be used to import them collectively into your database: 1 geoso --verbose twitter-import-jsonl-folder-to-db You should provide the proper input options for above commands to work properly. To see the list of available options, execute the command with --help option.","title":"Usage"},{"location":"usage/#usage","text":"geoso can be used in two different ways. Through the command line interface (CLI) In a python script","title":"Usage"},{"location":"usage/#using-geoso-in-a-python-script","text":"To use geoso in a project: 1 import geoso","title":"Using geoso in a python script"},{"location":"usage/#using-geoso-cli","text":"After installing geoso , e.g., in a python environment, you can simply execute geoso in command line to get access to provided functionality. 1 (base) mf@ut: geoso To see the possible commands under geoso CLI, use the following command: 1 (base) mf@ut: geoso --help","title":"Using geoso CLI"},{"location":"usage/#retrieve-tweets-from-the-streaming-api","text":"To retrieve tweets for a particular bounding box from Twitter Streaming API and save it in a PostgreSQL database (with PostGIS extension) or in a folder as JSON Lines files , use the following command: 1 geoso --verbose twitter-retrieve-data-streaming-api You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option, as follows: 1 geoso --verbose twitter-retrieve-data-streaming-api --help","title":"Retrieve tweets from the Streaming API"},{"location":"usage/#retrieve-information-about-the-tweets-that-were-saved-in-the-database","text":"To retrieve information about the tweets that have been already saved in the database, use the following command. 1 geoso --verbose twitter-get-tweets-info-from-db You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option.","title":"Retrieve information about the tweets that were saved in the database"},{"location":"usage/#export-tweets-from-the-database-to-a-csv-file","text":"To export tweets from the database to a CSV (comma separated values) file , use the following command: 1 geoso --verbose twitter-export-db-to-csv You should provide the proper input options for the command to work properly. To see the list of available options, execute the command with --help option.","title":"Export tweets from the database to a CSV file"},{"location":"usage/#import-tweets-from-json-lines-files-to-the-database","text":"Whenever you have some tweets saved in a JSON Lines file , you can use the following command to import those tweets into your PostgreSQL database: 1 geoso --verbose twitter-import-jsonl-file-to-db If you have more than one JSON Lines file , saved in a folder on your machine, the following command can be used to import them collectively into your database: 1 geoso --verbose twitter-import-jsonl-folder-to-db You should provide the proper input options for above commands to work properly. To see the list of available options, execute the command with --help option.","title":"Import tweets from JSON Lines files to the database"}]}